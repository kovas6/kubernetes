name: Deploy Terraform and Kubernetes Setup

on:
  push:
    branches:
      - main

jobs:
  terraform:
    name: 'Terraform Apply and Kubernetes Setup'
    runs-on: ubuntu-latest

    env:
      GOOGLE_APPLICATION_CREDENTIALS: "${{ github.workspace }}/gcp-key.json"
      TF_LOG: DEBUG  # Enable Terraform debug logging

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Write GCP credentials to file
        run: echo '${{ secrets.GCP_CREDENTIALS_JSON }}' > $GOOGLE_APPLICATION_CREDENTIALS

      - name: Mask secrets
        run: |
          echo "::add-mask::${{ secrets.POSTGRES_USER }}"
          echo "::add-mask::${{ secrets.POSTGRES_PASSWORD }}"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Set Terraform variables from GitHub Secrets
        run: |
          echo "TF_VAR_postgres_username=${{ secrets.POSTGRES_USER }}" >> $GITHUB_ENV
          echo "TF_VAR_postgres_password=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV

      - name: Debug Show GitHub Secrets being passed
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "${{ github.workspace }}/gcp-key.json"
          TF_LOG: DEBUG
        run: |
          echo "Username: $TF_VAR_postgres_username"
          echo "Password: $TF_VAR_postgres_password"

      - name: Terraform Init
        working-directory: terraform/dev
        run: terraform init

      - name: Terraform Format Check
        working-directory: terraform/dev
        run: terraform fmt -check -diff -recursive || true
        
      - name: Terraform Plan
        working-directory: terraform/dev
        run: terraform plan

      - name: Terraform Apply
        working-directory: terraform/dev
        run: terraform apply -auto-approve

      - name: Extract Terraform Outputs
        id: tf_outputs
        working-directory: terraform/dev
        run: |
          echo "project_id=$(terraform output -raw project_id)" >> $GITHUB_ENV
          echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_ENV
          echo "region=$(terraform output -raw region)" >> $GITHUB_ENV
          echo "zone=$(terraform output -raw zone)" >> $GITHUB_ENV

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.project_id }}

      - name: Authenticate gcloud
        run: gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin -q

      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials ${{ env.cluster_name }} \
            --zone ${{ env.zone }} \
            --project ${{ env.project_id }}

      - name: Resize GKE Node Pool (ensure enough memory for kube-dns)
        run: |
          gcloud container clusters resize ${{ env.cluster_name }} \
            --zone ${{ env.zone }} \
            --node-pool terraform-20250511174607273700000001 \
            --num-nodes=4 \
            --quiet

      - name: Apply Network Policy
        run: |
          kubectl apply -f k8s/network-policy.yaml

#      - name: Verify PostgreSQL Deployment
#        run: |    
#          kubectl get pods -l app=postgres
#          kubectl get svc postgres

#      - name: Terraform State List (Check Postgres Resource in State) 
#        run: terraform state list
#        working-directory: terraform/dev

      # Deploy helm chart 
      - name: Apply Network Policy
        run: |
          kubectl apply -f k8s/network-policy.yaml

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: List files
        run: |
          pwd
          ls -R

      - name: Ensure postgres namespace exists
        run: |
          kubectl get ns postgres || kubectl create ns postgres

      - name: Deploy PostgreSQL Helm Chart
        run: |
          helm upgrade --install postgres-release ./helm/postgres \
            --namespace postgres \
            --set postgres.username=${{ secrets.POSTGRES_USER }} \
            --set postgres.password=${{ secrets.POSTGRES_PASSWORD }} \
            --wait

      - name: Verify Helm Release
        run: |
          helm list -n postgres
          kubectl get pods -n postgres

      - name: Apply GCP Managed Certificate 
        run: kubectl apply -f k8s/managed-cert.yaml

#      - name: Port-forward PostgreSQL Pod
#        run: |   
#          POD_NAME=$(kubectl get pods -n postgres -l "app=postgres" -o jsonpath="{.items[0].metadata.name}")
#          echo "Forwarding port from pod: $POD_NAME"
#          kubectl port-forward -n postgres pod/$POD_NAME 5432:5432 &
#          sleep 5

      - name: Deploy Web Helm chart
        run: |
          if helm status web --namespace postgres >/dev/null 2>&1; then
            echo "Release exists, upgrading..."
            helm upgrade --install web ./helm/web \
              --namespace postgres \
              --set image.repository=gcr.io/turnkey-energy-457517-u4/web \
              --set image.tag=latest \
              --set image.pullPolicy=Always \
              --set postgres.username=${{ secrets.POSTGRES_USER }} \
              --set postgres.password=${{ secrets.POSTGRES_PASSWORD }} \
              --set postgres.secretName=web-postgres-secret \
              --set ingress.enabled=true
          else
            echo "Release not found, installing..."
            helm install web ./helm/web \
              --namespace postgres \
              --set image.repository=gcr.io/turnkey-energy-457517-u4/web \
              --set image.tag=latest \
              --set image.pullPolicy=Always \
              --set postgres.username=${{ secrets.POSTGRES_USER }} \
              --set postgres.password=${{ secrets.POSTGRES_PASSWORD }} \
              --set postgres.secretName=web-postgres-secret \
              --set ingress.enabled=true
          fi

#          helm upgrade --install web ./helm/web \ 
#            --namespace postgres \
#            --set postgres.username=${{ secrets.POSTGRES_USER }} \
#            --set postgres.password=${{ secrets.POSTGRES_PASSWORD }} \
#            --set postgres.secretName=web-postgres-secret
#            --wait

      - name: Restart web deployment
        run: kubectl rollout restart deployment web -n postgres

      # Get secrets  
      - name: TEMPORARY DEBUG (REMOVE AFTER USE)
        #if: false()  # This ensures the step never actually runs
        run: |
          echo "NEVER COMMIT CODE THAT DOES THIS"
          echo "USER: ${{ secrets.POSTGRES_USER }}"
          echo "PASS: ${{ secrets.POSTGRES_PASSWORD }}"